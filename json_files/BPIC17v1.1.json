{
  "name": "BPIC17",
  "version": "1.1.0",
  "nodes": [
    {
      "node_description": "(eventEntryNode:EventEntry {activity STR, lifecycle STR, timestamp DATETIME, eventId STR, eventOrigin STR, action STR})"
    },
    {
      "node_description": "(entityEntryNode:EntityEntry)"
    },
    {
      "node_description": "(entityApplicationEntryNode:entityEntryNode {eventOrigin STR, case STR, applicationType STR, loanGoal STR, requestedAmount DOUBLE})"
    },
    {
      "node_description": "(entityWorkItemEntryNode:entityEntryNode {eventId STR, eventOrigin STR})"
    },
    {
      "node_description": "(entityOfferNodeEntryNode:entityEntryNode {eventId STR, eventOrigin STR, firstWithdrawalAmount DOUBLE, creditScore DOUBLE, numberOfTerms INT, offeredAmount DOUBLE})"
    },
    {
      "node_description": "(entityResourceEntryNode:entityEntryNode {resource STR})"
    },
    {
      "node_description": "(activityNode:Activity {eventType STR})",
      "constructor": {
        "antecedents": [
          "(e:eventEntryNode)"
        ],
        "consequents": [
          "MERGE (a:activityNode {eventType: e.activity})"
        ]
      }
    },
    {
      "node_description": "(eventNode:Event {timestamp DATETIME, lifecycle STR, eventOrigin STR})",
      "constructor": {
        "antecedents": [
          "(e:eventEntryNode)"
        ],
        "consequents": [
          "CREATE (en:eventNode {timestamp: e.timestamp, lifecycle: e.lifecycle, eventOrigin: e.eventOrigin})",
          "MERGE (e) <- [r:eventPrevalenceRelation] - (en)"
        ]
      }
    },
    {
      "node_description": "(entityNode:Entity {sysId STR})"
    },
    {
      "node_description": "(entityApplicationNode:entityNode:Application {applicationType STR, loanGoal STR, requestedAmount DOUBLE})",
      "constructor": {
        "antecedents": [
          "(e:entityApplicationEntryNode {eventOrigin: 'Application'})"
        ],
        "consequents": [
          "MERGE (en:entityApplicationNode {sysId: e.case, applicationType: e.applicationType, loanGoal: e.loanGoal, requestedAmount: e.requestedAmount)",
          "MERGE (e) <- [r:entityPrevalenceRelation] - (en)"
        ]
      }
    },
    {
      "node_description": "(entityWorkItemNode:entityNode:WorkItem)",
      "constructor": {
        "antecedents": [
          "(e:entityWorkItemEntryNode {eventOrigin: 'Workflow'})"
        ],
        "consequents": [
          "MERGE (en:entityWorkItemEntryNode {sysId: e.eventId)",
          "MERGE (e) <- [r:entityPrevalenceRelation] - (en)"
        ]
      }
    },
    {
      "node_description": "(entityOfferNode:entityNode:Offer {creditScore DOUBLE, firstWithdrawalAmount DOUBLE, monthlyCost DOUBLE, numberOfTerms INT, offeredAmount DOUBLE})",
      "constructor": {
        "antecedents": [
          "(e:entityOfferNodeEntryNode WHERE e.eventOrigin = 'Offer' AND e.eventId STARTS WITH 'Offer_')"
        ],
        "consequents": [
          "MERGE (en:entityOfferNode {sysId: e.eventId, creditScore: e.creditScore, firstWithdrawalAmount: e.firstWithdrawalAmount, monthlyCost: e.monthlyCost, numberOfTerms: e.numberOfTerms, offeredAmount: e.offeredAmount})",
          "MERGE (e) <- [r:entityPrevalenceRelation] - (en)"
        ]
      }
    },
    {
      "node_description": "(entityResourceNode:entityNode:Resource)",
      "constructor": {
        "antecedents": [
          "(e:entityResourceEntryNode)"
        ],
        "consequents": [
          "MERGE (en:entityResourceNode {sysId: e.resource})",
          "MERGE (e) <- [r:entityPrevalenceRelation] - (en)"
        ]
      }
    }
  ],
  "relationships": [
    {
      "relationship_description": "(entityEntryNode) <- [entityPrevalenceRelation:prevalence] - (entityNode)"
    },
    {
      "relationship_description": "(eventEntryNode) <- [eventPrevalenceRelation:prevalence] - (eventNode)"
    },
    {
      "relationship_description": "(entityNode) <- [corrRelation:corr] - (eventNode)"
    },
    {
      "relationship_description": "(entityApplicationNode) <- [entityApplicationCorrRelation:corrRelation] - (eventNode)",
      "constructor": {
        "antecedents": [
          "(:entityApplicationEntryNode {eventOrigin: 'Application'}) <- [:entityPrevalenceRelation] - (n:entityApplicationNode)",
          "(:eventEntryNode {case: n.sysId}) <- [:eventPrevalenceRelation] - (e:eventNode)"
        ],
        "consequents": [
          "MERGE (e) <- [r:corrRelation] - (n)"
        ]
      }
    }
  ]
}
